name: Build & Push Docker Images & Deploy Aliyun

on:
    push:
      branches:
        - release/*
    release:
      types: [published]

jobs:
  confirm-ecs-install-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: SSH to ECS and check/install Docker
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ECS_SSH_PRIVATE_KEY }}
          ECS_IP: ${{ secrets.ECS_IP }}
          ECS_USER: ${{ secrets.ECS_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          # 使用SSH检查服务是否存在
          if ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP "systemctl is-active --quiet clash"; then
            echo "服务 clash 正在运行"
          else
            echo "开始安装 clash"
            scp -i private_key.pem .reference/clash.tar.gz $ECS_USER@$ECS_IP:/tmp/clash.tar.gz
            scp -i private_key.pem .reference/config.yaml $ECS_USER@$ECS_IP:/tmp/config.yaml
            ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP << EOF
                cd /tmp
                mkdir /etc/clash
                mv config.yaml /etc/clash/
                tar -zxvf clash.tar.gz
                mv clash/clash.service /etc/systemd/system/
                mv clash/clash /usr/local/bin/
                mv clash/Country.mmdb /etc/clash/
                rm -fr clash
                systemctl enable clash
                systemctl start clash
                export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890
                echo 'export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc
                echo "clash 安装完成."
          EOF
          fi
          ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP << EOF
              # 检查 Docker 是否已安装
              if ! command -v docker &> /dev/null; then
                  echo "Docker 未安装，正在安装..."
                  # 安装 Docker 的命令
                  sudo yum update -y
                  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
                  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                  sudo yum install -y docker-ce docker-ce-cli containerd.io
                  sudo systemctl start docker
                  sudo systemctl enable docker
                  echo "Docker 安装完成."
              else
                  echo "Docker 已安装，版本为：$(docker --version)"
              fi
          EOF

          # 更新 docker 的 proxy
          ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP << EOF
              # 使用grep检查环境变量是否存在
              ENV_VARIABLE='Environment="HTTP_PROXY=http://127.0.0.1:7890"'
              if grep -q "$ENV_VARIABLE" /lib/systemd/system/docker.service; then
                sudo sed -i '/\[Service\]/a Environment="HTTP_PROXY=http://127.0.0.1:7890"' /lib/systemd/system/docker.service
                sudo sed -i '/\[Service\]/a Environment="HTTPS_PROXY=http://127.0.0.1:7890"' /lib/systemd/system/docker.service
                systemctl daemon-reload
                systemctl restart docker
                echo "docker 配置 proxy 完成."
              else
                echo "docker 已配置 proxy"
              fi
          EOF


  ecs-start-docker-compose:
    needs: [confirm-ecs-install-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Upload and execute compose file to ecs
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ECS_SSH_PRIVATE_KEY }}
          ECS_IP: ${{ secrets.ECS_IP }}
          ECS_USER: ${{ secrets.ECS_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          echo "DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }}" > .tmp.env
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP << EOF
            # 检查目录是否已存在
            if [ ! -d "/data" ]; then
              mkdir -p "/data"
            fi
          EOF
          scp -i private_key.pem docker-compose-prod.yaml $ECS_USER@$ECS_IP:/data/docker-compose.yaml
          scp -i private_key.pem .tmp.env $ECS_USER@$ECS_IP:/data/.env
          ssh -o StrictHostKeyChecking=no -i private_key.pem $ECS_USER@$ECS_IP << EOF
            cd /data
            docker compose down
            docker compose up -d 
          EOF
